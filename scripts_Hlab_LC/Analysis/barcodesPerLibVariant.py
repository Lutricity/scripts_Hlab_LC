# Determine how many barcodes of each library variant are present in a library
# input :read the .unq file for a RNA-MaP library generated by compressBarcodes_v8.py (greenleaf lab program)
#loop through the consensus seq column and make a dictionary counter for each time this matches one of the 30,000 seqs ordered
#output: a histogram of all 29,800 seqs ordered from CustomArray witht he number of barcode hits
# make a csv with the dictionary consensus seqs and the number of counts they had

# make a list of all input seqs
# make a matching list of counters (by position)

import pandas as pd
import sys, getopt
import csv

#tool to troubleshoot if needed:
import time

# rvs_comp function takes a list of sequences and outputs an equal length list of the rvs_complements of the sequences it read
def reverse_complement(seq,comp):
    l = []
    rvs = seq[::-1]

    for i in rvs:
        l.append(comp[i])
        #print(l)
    s = ''.join(l)
    return(s)

def finder(ref_lst, vari_lst):
    pos = 0
    seq_dict = {}

    for i in ref_lst:
        count = 0
        for j in vari_lst:
            if i in j:
                count += 1
            else:
                pass
        # change pos to i on line below if want to assign counts to refernece sequences
        seq_dict[pos] = count
        pos += 1


    return(seq_dict)
# this function outputs a dictionary with each input ref seq (in order) as a position and the count of how many times that sequence was matched

#------------------------------------------------------------------
def main(argv):
    start_time = time.time()

#define complmenting nts for rvs_cmp function
    complement = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A'}

#Read in the reference library sequecnes
    ref_seqs = []

    f = open("one_repeat_ref_Lib4.csv", 'r')
    for l in f:
        # if l[-2:] == "\r\n"
        l = l[:-2]
        ref_seqs.append(l)

    ref_seqs.pop(0)
    f.close()



    # Assign command lne args
    try:
        opts, args = getopt.getopt(argv, "hi:", ["ifile="])
    except getopt.GetoptError:
        print('barcodesPerLibVariant.py -i <inputfile.unq>')
        sys.exit(1)
    for opt, arg in opts:
        if opt == '-h':
            print('barcodesPerLibVariant.py -i <inputfile.unq>')
            sys.exit()
        elif opt in ("-i", "--ifile"):
            inputfile = arg
    print('Input file is "', inputfile)

    # read in CPseq

    # setting input/output file names
    in_foo = str(inputfile)

    # read in the active columns of the CPSeq to be edited
    unq = pd.read_csv(in_foo, delimiter="\t", index_col=False)

    #isolate consensus seq column from .unq file
    consensus_seqs = unq.iloc[:, 0]


    # make a list of the rvs complement of each of read 2 sequences
    refseq_rc = []
    for i in ref_seqs:
        o = reverse_complement(i, complement)
        refseq_rc.append(o)


    counted = finder(refseq_rc, consensus_seqs)

    print("--- %s seconds ---" % (time.time() - start_time))
    print(in_foo, "analyzed")

    #Make a new dictionary with consensus seqs and the number of counts in these
    #list of counts
    count_values = list(counted.values())

    #generate output dict
    output_dict = {}

    #pair the ref seq with its count number in output_dict
    for i in range(len(ref_seqs)):
        output_dict[ref_seqs[i]] = count_values[i]

    #or with list comprehension
    #output_dict = {ref_seqs[i]: count_values[i] for i in range(len(ref_seqs))}

    #output the refseq, count to a csv (checkpoint)
    with open('counts_per_lib_seq.csv', 'w') as f:
        for key in output_dict.keys():
            f.write("%s,%s\n"%(key,output_dict[key]))
    f.close()

if __name__ == "__main__":
    main(sys.argv[1:])